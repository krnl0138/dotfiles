#zstyle :compinstall filename '/home/gppk/.zshrc'
autoload -Uz compinit && compinit
compinit
_comp_options+=(globdots)
# Auto Rehash for completions
zstyle ':completion:*' rehash true
# choosing by arrows
zstyle ':completion:*' menu yes select
setopt completealiases
setopt COMPLETE_IN_WORD    # Complete from both ends of a word.
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word.
setopt PATH_DIRS           # Perform path search even on command names with slashes.
setopt AUTO_MENU           # Show completion menu on a succesive tab press.
setopt AUTO_LIST           # Automatically list choices on ambiguous completion.
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash.
unsetopt MENU_COMPLETE     # Do not autoselect the first completion entry.
unsetopt FLOW_CONTROL      # Disable start/stop characters in shell editor.
# No Flow control
#setopt NO_FLOW_CONTROL

# theme
autoload -Uz promptinit
promptinit
prompt fade blue
# run-help alt+h default
autoload -Uz run-help
alias help=run-help
# coloring output of completion
zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"
# Directories
#zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*' squeeze-slashes true

zstyle ':completion:*:descriptions' format '%U%B%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
# cache for completions
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
# interactive comments from #
setopt interactive_comments

# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
#the number of errors allowed by _approximate to increase with the length of what you have typed so far:
zstyle -e ':completion:*:approximate:*' \
        max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3))numeric)'
#Ignore completion functions for commands you don’t have:
zstyle ':completion:*:functions' ignored-patterns '_*'

# no cd
setopt autocd

# History
HISTFILE=$HOME/.zsh_history
HISTSIZE=9999
SAVEHIST=9999

# hisory search
autoload -Uz up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
[[ -n "$key[Up]"   ]] && bindkey -- "$key[Up]"   up-line-or-beginning-search
[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" down-line-or-beginning-search

#[[ -n "$key[Up]"   ]] && bindkey -- "$key[Up]"  history-beginning-search-backward 
#[[ -n "$key[Down]" ]] && bindkey -- "$key[Down]" history-beginning-search-forward

# Добавляет в историю время выполнения команды.
setopt extended_history
#Обновляет историю после каждого нажатия enter.
setopt inc_append_history
#История становится общей между всеми сессиями / терминалами.
setopt share_history
#Игнорируем все дубликаты, строки начинающиеся с пробелов и пустые строки
setopt hist_ignore_all_dups
setopt hist_ignore_space
#zstyle ':completion:*:history-words' menu yes
#
# Case-insensitive (all), partial-word, and then substring completion.
if zstyle -t ':omz:completion:*' case-sensitive; then
  zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
  setopt CASE_GLOB
else
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
  unsetopt CASE_GLOB
fi

# use the vi navigation keys in menu completion
bindkey -N menuselect
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# kill autocompletion
zstyle ':completion:*:processes' command 'ps -xuf'
zstyle ':completion:*:processes' sort false
zstyle ':completion:*:processes-names' command 'ps xho command'

# Вывод последних команд если не указан аргумент, поиск по истории, если указан:
h() {
  if [[ -z "$1" ]]; then
    history
  else
    history 0 | grep "$*"
  fi
}
# ctrl+arrow for 1 word
bindkey '^[[1;5D'   backward-word
bindkey '^[[1;5C'   forward-word
bindkey "^[[A"  history-beginning-search-backward
bindkey "^[[B"  history-beginning-search-forward
bindkey -a "^[[A"  history-beginning-search-backward
bindkey -a "^[[B"  history-beginning-search-forward

# Начало и конец строки клавишами home и end.
bindkey "^[OH"  beginning-of-line 
bindkey "^[OF"  end-of-line

# Устанавливаем корректные права для файлов и папок одной командой.
permm() {
  if [[ -z "$1" ]]; then
    find .    -type d -print0 | xargs -0 chmod 700
    find .    -type f -print0 | xargs -0 chmod 600
  else
    find "$*" -type d -print0 | xargs -0 chmod 700
    find "$*" -type f -print0 | xargs -0 chmod 600
  fi
}
permsg() {
  if [[ -z "$1" ]]; then
    find .    -type d -print0 | xargs -0 chmod 770
    find .    -type f -print0 | xargs -0 chmod 660
  else
    find "$*" -type d -print0 | xargs -0 chmod 770
    find "$*" -type f -print0 | xargs -0 chmod 660
  fi
}

# zsh globbing
setopt extendedglob
# correction
setopt correctall
# export MANPATH="/usr/local/man:$MANPATH"

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Test microphone working
test-microphone() {
    arecord -vvv -f dat /dev/null
}

# Some stuff over ccache for gcc compiler
# Create for each package a dir
if [[ ${FEATURES} == *ccache* && ${EBUILD_PHASE_FUNC} == src_* ]]; then 
	if [[ ${CCACHE_DIR} == ~/ccache ]]; then 
		export CCACHE_DIR=/ccache/${CATEGORY}/${PN}:${SLOT} 
		mkdir -p "${CCACHE_DIR}" || die 
	fi
fi

# Fzf w/ mlocate script
# https://github.com/gotbletu/shownotes/blob/master/fzf_locate_fzf_playonlinux.md
fzf-locate() { xdg-open "$(locate "*" | fzf -e)" ;}
# Defaults for FZF
export FZF_DEFAULT_OPTS="--color=16 --cycle -m --inline-info --preview '(highlight -O ansi -l {}) | head -100'" 

# Discrete video card options
export PRIME='DRI_PRIME=1'
#alias firefox-nightly='DRI_PRIME=1 firefox-nightly'
#alias calibre='DRI_PRIME=1 calibre'
#alias zathura='DRI_PRIME=1 zathura'
#alias vlc='DRI_PRIME=1 vlc'
#xrandr --setprovideroffloadsink 1 0 


## ALIASES
alias ls='ls --color=auto'
alias lsla='ls -la --color=auto'
alias grep='grep -n --color=always'
#alias vim="nvim"
yy () { mpv --really-quiet --volume=50 --autofit=30% --geometry=-10-15 --ytdl --ytdl-format='mp4[height<=?720]' -ytdl-raw-options=playlist-start=1 "$1" & ;}
alias todo='jrnl @todolist -n 1'
alias todolist='jrnl @todolist -n 1'
alias todoedit='jrnl @todolist -n 1 --edit'
alias i3cheatsheet='egrep ^bind ~/.config/i3/config | cut -d '\'' '\'' -f 2- | sed '\''s/ /\t/'\'' | column -ts $'\''\t'\'' | pr -2 -w 160 -t | less'
alias n="nnn"
alias paclog="pacolog"
alias mutt="neomutt"
alias p="pacaur"
alias starwars="telnet towel.blinkenlights.nl"
alias sdn="sudo shutdown now"
alias mkdir="mkdir -pv"
alias calc='wcalc'
alias calculator='wcalc'
alias wifi-menu='sudo wifi-menu'
#alias vimw='vim ~/Dropbox/repos/wiki.git/vimwiki/index.wiki'
alias vimw='vim ~/vimwiki/index.wiki'
#alias vw='vim ~/Dropbox/repos/wiki.git/vimwiki/index.wiki'
alias vw='vim ~/vimwiki/index.wiki'
alias du='du -h --max-depth=1 | sort -h -r'
alias enviroments='export -p'
alias envs='export -p'
alias mixer="alsamixer"
alias disks='echo "╓───── m o u n t . p o i n t s"; echo "╙────────────────────────────────────── ─ ─ "; lsblk -a; echo ""; echo "╓───── d i s k . u s a g e"; echo "╙────────────────────────────────────── ─ ─ "; df -h;'
alias orphans='sudo pacman -Rns $(pacman -Qqdt)'
alias simplenote='chromium --new-tab http://app.simplenote.com'
alias dwarffortress='cd Downloads/df_linux/ && ./df'
alias df='df -h'
alias audiomagic='killall pulseaudio && killall mpd && pulseaudio && mpd'
alias whoneeds='pactree -r'
alias c="clear"
alias weather_saratov="curl wttr.in/saratov"
alias weather="curl wttr.in/odintsovo"
alias myip="ip route && curl ipinfo.io"
alias lock="i3lock -f -u -e -t -i ~/pics/wallpaper/locksreen.png"
alias killX='killall Xorg'
alias vless='~/.vim/less.sh'
alias susp='systemctl suspend'
alias ping='ping -c 1'
alias redshift='redshift -l 51.54:46.00'
alias e='exit'
alias boottime='systemd-analyze'
alias r='ranger'
alias zshrc='cd /home/gppk && source .zshrc'
alias mapscii='telnet mapscii.me'
alias lostfiles_relaxed='sudo /usr/bin/lostfiles relaxed'
alias lostfiles_stricted='sudo /usr/bin/lostfiles strict'

## Tree
alias tree='tree -hC'
alias tree1='tree -hCL 1'
alias tree2='tree -hCL 2'
alias tree3='tree -hCL 3'
alias pactree='pactree -c'

## less 
export LESS=-R
export LESS_TERMCAP_me=$(printf '\e[0m')
export LESS_TERMCAP_se=$(printf '\e[0m')
export LESS_TERMCAP_ue=$(printf '\e[0m')
export LESS_TERMCAP_mb=$(printf '\e[1;32m')
export LESS_TERMCAP_md=$(printf '\e[1;34m')
export LESS_TERMCAP_us=$(printf '\e[1;32m')
export LESS_TERMCAP_so=$(printf '\e[1;44;1m')

## Exports
#export LOCKER="i3lock -f -u -e -t -i ~/pics/wallpaper/lockscreen.png"
export EDITOR=vim
export TERMINAL=st
export BROWSER=chromium #qutebrowser firefox-nightly
export PLAYER=mplayer
export VISUAL=vim
export PAGER=less # ~/.vim/less.sh
#export LANG=ru_RU CP1251
export IN_API_KEY="6a39da9bf3f74862a0d3b730ab509146"

# Enable FASD
eval "$(fasd --init zsh-hook zsh-wcomp auto)"
alias v='f -e vim'
alias m='f -e mpv' #vlc
alias j='fasd_cd -d'
alias z='f -e zathura'
alias o='a -e xdg-open'
# zsh profiling
# just execute 'ZSH_PROFILE_RC=1 zsh' and run 'zprof' to get the details
if [[ $ZSH_PROFILE_RC -gt 0 ]] ; then
    zmodload zsh/zprof
fi

## Add cd backwards options
alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."

# OLD STUFF (JUNK)
## add NeoVim binding
# mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
# ln -s ~/.vim $XDG_CONFIG_HOME/nvim
# ln -s ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim
#alias vim="nvim"

# unpacking archive
ex () {
 if [ -f $1 ] ; then
   case $1 in
     *.tar.bz2) tar xvjf $1   ;;
     *.tar.gz)  tar xvzf $1   ;;
     *.tar.xz)  tar xvfJ $1   ;;
     *.bz2)     bunzip2 $1    ;;
     *.rar)     unrar x $1    ;;
     *.gz)      gunzip $1     ;;
     *.tar)     tar xvf $1    ;;
     *.tbz2)    tar xvjf $1   ;;
     *.tgz)     tar xvzf $1   ;;
     *.zip)     unzip $1      ;;
     *.Z)       uncompress $1 ;;
     *.7z)      7z x $1       ;;
     *)         echo "'$1' Не может быть распакован при помощи >ex<" ;;
   esac
 else
   echo "'$1' не является допустимым файлом"
 fi
}
# packing archive
pk () {
if [ $1 ] ; then
case $1 in
tbz)       tar cjvf $2.tar.bz2 $2      ;;
tgz)       tar czvf $2.tar.gz  $2       ;;
tar)      tar cpvf $2.tar  $2       ;;
bz2)    bzip $2 ;;
gz)        gzip -c -9 -n $2 > $2.gz ;;
zip)       zip -r $2.zip $2   ;;
7z)        7z a $2.7z $2    ;;
*)         echo "'$1' не может быть упакован с помощью pk()" ;;
esac
else
echo "'$1' не является допустимым файлом"
fi
}
### END .bashrc


# Pause on global rm
#setopt RM_STAR_WAIT

# Enable to Syntax Highlighting
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Enable Autojump
# [[ -s /etc/profile.d/autojump.sh ]] && . /etc/profile.d/autojump.sh


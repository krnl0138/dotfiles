pacurl () { xdg-open "$(expac -S %u "$1")" }

password () {
    echo 'New generated password is:' 
    tr -dc 'a-zA-Z0-9~!@#$%^&*_()+}{?></";.,[]=-' < /dev/urandom | fold -w 32 | head -n 1
}

start-latin() {
    nohup zathura $HOME/Downloads/pdfs/latin-book.pdf &
    $EDITOR $HOME/latin.tex
}

#notes () { files="$()find "$HOME/notes" -name "*.pdf" | sort | fzf | [[ "$1" == "pdf"]] 
#&& {xargs -r -d '\n' $READER ; exit 1 ;} || xargs -r -d '\n' $EDITOR ;}

yy () { mpv --really-quiet --volume=50 --autofit=30% --geometry=-10-15 \ --ytdl 
        --ytdl-format='mp4[height<=?720]' -ytdl-raw-options=playlist-start=1 "$1" & ;}

# pywal
wal-tile () {
    wal -n -i "$@"
    swaymsg -s $SWAYSOCK output VGA-1 bg "$(< "${HOME}/.cache/wal/wal")" fill 
}
wal-rtile () {
    wal -n -i "$(find ~/pics/wall/ | shuf -n 1)"
    swaymsg -s $SWAYSOCK output VGA-1 bg "$(< "${HOME}/.cache/wal/wal")" fill 
}

# colored man files
man() {
    env \
        LESS_TERMCAP_me=$(printf '\e[0m') \
        LESS_TERMCAP_se=$(printf '\e[0m') \
        LESS_TERMCAP_ue=$(printf '\e[0m') \
        LESS_TERMCAP_mb=$(printf '\e[1;32m') \
        LESS_TERMCAP_md=$(printf '\e[1;34m') \
        LESS_TERMCAP_us=$(printf '\e[1;32m') \
        LESS_TERMCAP_so=$(printf '\e[1;44;1m') \
        man "$@"
}

# packing archive
archive () {
	if (( $# == 0 )); then
		cat <<-'EOF' >&2
			Usage: archive [option] [file ...]
			Options:
			    tbz, tgz, tar, bz2, gz, zip, 7z
		EOF
	fi

    if [ $1 ] ; then
    case $1 in
        tbz)       tar cjvf $2.tar.bz2 $2      ;;
        tgz)       tar czvf $2.tar.gz  $2       ;;
        tar)      tar cpvf $2.tar  $2       ;;
        bz2)    bzip $2 ;;
        gz)        gzip -c -9 -n $2 > $2.gz ;;
        zip)       zip -r $2.zip $2   ;;
        7z)        7z a $2.7z $2    ;;
        *)         echo "'$1' не может быть упакован с помощью pk()" ;;
    esac
    fi
}

# unpacking archive
alias x=extract
extract() {
	local remove_archive
	local success
	local extract_dir

	if (( $# == 0 )); then
		cat <<-'EOF' >&2
			Usage: extract [-option] [file ...]
			Options:
			    -r, --remove    Remove archive after unpacking.
		EOF
	fi

	remove_archive=1
	if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
		remove_archive=0
		shift
	fi

	while (( $# > 0 )); do
		if [[ ! -f "$1" ]]; then
			echo "extract: '$1' is not a valid file" >&2
			shift
			continue
		fi

		success=0
		extract_dir="${1:t:r}"
		case "${1:l}" in
			(*.tar.gz|*.tgz) (( $+commands[pigz] )) && { pigz -dc "$1" | tar xv } || tar zxvf "$1" ;;
			(*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
			(*.tar.xz|*.txz)
				tar --xz --help &> /dev/null \
				&& tar --xz -xvf "$1" \
				|| xzcat "$1" | tar xvf - ;;
			(*.tar.zma|*.tlz)
				tar --lzma --help &> /dev/null \
				&& tar --lzma -xvf "$1" \
				|| lzcat "$1" | tar xvf - ;;
			(*.tar) tar xvf "$1" ;;
			(*.gz) (( $+commands[pigz] )) && pigz -d "$1" || gunzip "$1" ;;
			(*.bz2) bunzip2 "$1" ;;
			(*.xz) unxz "$1" ;;
			(*.lzma) unlzma "$1" ;;
			(*.z) uncompress "$1" ;;
			(*.zip|*.war|*.jar|*.sublime-package|*.ipsw|*.xpi|*.apk|*.aar|*.whl) unzip "$1" -d $extract_dir ;;
			(*.rar) unrar x -ad "$1" ;;
			(*.7z) 7za x "$1" ;;
			(*.deb)
				mkdir -p "$extract_dir/control"
				mkdir -p "$extract_dir/data"
				cd "$extract_dir"; ar vx "../${1}" > /dev/null
				cd control; tar xzvf ../control.tar.gz
				cd ../data; extract ../data.tar.*
				cd ..; rm *.tar.* debian-binary
				cd ..
			;;
			(*)
				echo "extract: '$1' cannot be extracted" >&2
				success=1
			;;
		esac

		(( success = $success > 0 ? $success : $? ))
		(( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
		shift
	done
}

# colored cat
alias ccat='colorize_via_pygmentize'
colorize_via_pygmentize() {
    if ! (( $+commands[pygmentize] )); then
        echo "package 'Pygments' is not installed!"
        return 1
    fi

    # pygmentize stdin if no arguments passed
    if [ $# -eq 0 ]; then
        pygmentize -g
        return $?
    fi

    # guess lexer from file extension, or
    # guess it from file contents if unsuccessful
    local FNAME lexer
    for FNAME in $@
    do
        lexer=$(pygmentize -N "$FNAME")
        if [[ $lexer != text ]]; then
            pygmentize -l "$lexer" "$FNAME"
        else
            pygmentize -g "$FNAME"
        fi
    done
}
